// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU-basic {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT
        out[16]; // 16-bit output

    PARTS:
    Or (a=x[0], b=zx, out=nzxout0);
    Or (a=x[1], b=zx, out=nzxout1);
    Or (a=x[2], b=zx, out=nzxout2);
    Or (a=x[3], b=zx, out=nzxout3);
    Or (a=x[4], b=zx, out=nzxout4);
    Or (a=x[5], b=zx, out=nzxout5);
    Or (a=x[6], b=zx, out=nzxout6);
    Or (a=x[7], b=zx, out=nzxout7);
    Or (a=x[8], b=zx, out=nzxout8);
    Or (a=x[9], b=zx, out=nzxout9);
    Or (a=x[10], b=zx, out=nzxout10);
    Or (a=x[11], b=zx, out=nzxout11);
    Or (a=x[12], b=zx, out=nzxout12);
    Or (a=x[13], b=zx, out=nzxout13);
    Or (a=x[14], b=zx, out=nzxout14);
    Or (a=x[15], b=zx, out=nzxout15);
    Not (in=nzxout0, out=zxout0);
    Not (in=nzxout1, out=zxout1);
    Not (in=nzxout2, out=zxout2);
    Not (in=nzxout3, out=zxout3);
    Not (in=nzxout4, out=zxout4);
    Not (in=nzxout5, out=zxout5);
    Not (in=nzxout6, out=zxout6);
    Not (in=nzxout7, out=zxout7);
    Not (in=nzxout8, out=zxout8);
    Not (in=nzxout9, out=zxout9);
    Not (in=nzxout10, out=zxout10);
    Not (in=nzxout11, out=zxout11);
    Not (in=nzxout12, out=zxout12);
    Not (in=nzxout13, out=zxout13);
    Not (in=nzxout14, out=zxout14);
    Not (in=nzxout15, out=zxout15);

    Not (in=nx, out=nnx);
    And (a=zxout0, b=nnx, out=nxout0);
    And (a=zxout1, b=nnx, out=nxout1);
    And (a=zxout2, b=nnx, out=nxout2);
    And (a=zxout3, b=nnx, out=nxout3);
    And (a=zxout4, b=nnx, out=nxout4);
    And (a=zxout5, b=nnx, out=nxout5);
    And (a=zxout6, b=nnx, out=nxout6);
    And (a=zxout7, b=nnx, out=nxout7);
    And (a=zxout8, b=nnx, out=nxout8);
    And (a=zxout9, b=nnx, out=nxout9);
    And (a=zxout10, b=nnx, out=nxout10);
    And (a=zxout11, b=nnx, out=nxout11);
    And (a=zxout12, b=nnx, out=nxout12);
    And (a=zxout13, b=nnx, out=nxout13);
    And (a=zxout14, b=nnx, out=nxout14);
    And (a=zxout15, b=nnx, out=nxout15);

    Or (a=y[0], b=zy, out=nzyout0);
    Or (a=y[1], b=zy, out=nzyout1);
    Or (a=y[2], b=zy, out=nzyout2);
    Or (a=y[3], b=zy, out=nzyout3);
    Or (a=y[4], b=zy, out=nzyout4);
    Or (a=y[5], b=zy, out=nzyout5);
    Or (a=y[6], b=zy, out=nzyout6);
    Or (a=y[7], b=zy, out=nzyout7);
    Or (a=y[8], b=zy, out=nzyout8);
    Or (a=y[9], b=zy, out=nzyout9);
    Or (a=y[10], b=zy, out=nzyout10);
    Or (a=y[11], b=zy, out=nzyout11);
    Or (a=y[12], b=zy, out=nzyout12);
    Or (a=y[13], b=zy, out=nzyout13);
    Or (a=y[14], b=zy, out=nzyout14);
    Or (a=y[15], b=zy, out=nzyout15);
    Not (in=nzyout0, out=zyout0);
    Not (in=nzyout1, out=zyout1);
    Not (in=nzyout2, out=zyout2);
    Not (in=nzyout3, out=zyout3);
    Not (in=nzyout4, out=zyout4);
    Not (in=nzyout5, out=zyout5);
    Not (in=nzyout6, out=zyout6);
    Not (in=nzyout7, out=zyout7);
    Not (in=nzyout8, out=zyout8);
    Not (in=nzyout9, out=zyout9);
    Not (in=nzyout10, out=zyout10);
    Not (in=nzyout11, out=zyout11);
    Not (in=nzyout12, out=zyout12);
    Not (in=nzyout13, out=zyout13);
    Not (in=nzyout14, out=zyout14);
    Not (in=nzyout15, out=zyout15);

    Not (in=ny, out=nny);
    And (a=zyout0, b=nny, out=nyout0);
    And (a=zyout1, b=nny, out=nyout1);
    And (a=zyout2, b=nny, out=nyout2);
    And (a=zyout3, b=nny, out=nyout3);
    And (a=zyout4, b=nny, out=nyout4);
    And (a=zyout5, b=nny, out=nyout5);
    And (a=zyout6, b=nny, out=nyout6);
    And (a=zyout7, b=nny, out=nyout7);
    And (a=zyout8, b=nny, out=nyout8);
    And (a=zyout9, b=nny, out=nyout9);
    And (a=zyout10, b=nny, out=nyout10);
    And (a=zyout11, b=nny, out=nyout11);
    And (a=zyout12, b=nny, out=nyout12);
    And (a=zyout13, b=nny, out=nyout13);
    And (a=zyout14, b=nny, out=nyout14);
    And (a=zyout15, b=nny, out=nyout15);

    // FullAdder (a=f, b=nxout0, c=nyout0, sum=null0, carry=fout0);
    // FullAdder (a=f, b=nxout1, c=nyout1, sum=null1, carry=fout1);
    // FullAdder (a=f, b=nxout2, c=nyout2, sum=null2, carry=fout2);
    // FullAdder (a=f, b=nxout3, c=nyout3, sum=null3, carry=fout3);
    // FullAdder (a=f, b=nxout4, c=nyout4, sum=null4, carry=fout4);
    // FullAdder (a=f, b=nxout5, c=nyout5, sum=null5, carry=fout5);
    // FullAdder (a=f, b=nxout6, c=nyout6, sum=null6, carry=fout6);
    // FullAdder (a=f, b=nxout7, c=nyout7, sum=null7, carry=fout7);
    // FullAdder (a=f, b=nxout8, c=nyout8, sum=null8, carry=fout8);
    // FullAdder (a=f, b=nxout9, c=nyout9, sum=null9, carry=fout9);
    // FullAdder (a=f, b=nxout10, c=nyout10, sum=null10, carry=fout10);
    // FullAdder (a=f, b=nxout11, c=nyout11, sum=null11, carry=fout11);
    // FullAdder (a=f, b=nxout12, c=nyout12, sum=null12, carry=fout12);
    // FullAdder (a=f, b=nxout13, c=nyout13, sum=null13, carry=fout13);
    // FullAdder (a=f, b=nxout14, c=nyout14, sum=null14, carry=fout14);
    // FullAdder (a=f, b=nxout15, c=nyout15, sum=null15, carry=fout15);

    FullAdder (a=f, b=nxout0, c=nyout0, sum=fout0, carry=c0);
    FullAdder (a=c0, b=nxout1, c=nyout1, sum=fout1, carry=c1);
    FullAdder (a=c1, b=nxout2, c=nyout2, sum=fout2, carry=c2);
    FullAdder (a=c2, b=nxout3, c=nyout3, sum=fout3, carry=c3);
    FullAdder (a=c3, b=nxout4, c=nyout4, sum=fout4, carry=c4);
    FullAdder (a=c4, b=nxout5, c=nyout5, sum=fout5, carry=c5);
    FullAdder (a=c5, b=nxout6, c=nyout6, sum=fout6, carry=c6);
    FullAdder (a=c6, b=nxout7, c=nyout7, sum=fout7, carry=c7);
    FullAdder (a=c7, b=nxout8, c=nyout8, sum=fout8, carry=c8);
    FullAdder (a=c8, b=nxout9, c=nyout9, sum=fout9, carry=c9);
    FullAdder (a=c9, b=nxout10, c=nyout10, sum=fout10, carry=c10);
    FullAdder (a=c10, b=nxout11, c=nyout11, sum=fout11, carry=c11);
    FullAdder (a=c11, b=nxout12, c=nyout12, sum=fout12, carry=c12);
    FullAdder (a=c12, b=nxout13, c=nyout13, sum=fout13, carry=c13);
    FullAdder (a=c13, b=nxout14, c=nyout14, sum=fout14, carry=c14);
    FullAdder (a=c14, b=nxout15, c=nyout15, sum=fout15, carry=null);

    Not (in=no, out=nno);
    And (a=nno, b=fout0, out=out[0]);
    And (a=nno, b=fout1, out=out[1]);
    And (a=nno, b=fout2, out=out[2]);
    And (a=nno, b=fout3, out=out[3]);
    And (a=nno, b=fout4, out=out[4]);
    And (a=nno, b=fout5, out=out[5]);
    And (a=nno, b=fout6, out=out[6]);
    And (a=nno, b=fout7, out=out[7]);
    And (a=nno, b=fout8, out=out[8]);
    And (a=nno, b=fout9, out=out[9]);
    And (a=nno, b=fout10, out=out[10]);
    And (a=nno, b=fout11, out=out[11]);
    And (a=nno, b=fout12, out=out[12]);
    And (a=nno, b=fout13, out=out[13]);
    And (a=nno, b=fout14, out=out[14]);
    And (a=nno, b=fout15, out=out[15]);
}